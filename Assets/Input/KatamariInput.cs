//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input/KatamariInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KatamariInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KatamariInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KatamariInput"",
    ""maps"": [
        {
            ""name"": ""Ball"",
            ""id"": ""32625241-0aeb-4a24-b6f0-587d42f2bf0e"",
            ""actions"": [
                {
                    ""name"": ""MoveBall"",
                    ""type"": ""Button"",
                    ""id"": ""a13d6728-512c-44a6-aecb-cc0c7daa4bdc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveCamera"",
                    ""type"": ""Value"",
                    ""id"": ""ffdce258-9766-4253-a39f-2c83c828529f"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": ""ScaleVector2(y=0.01)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""981c5d01-77d7-47fa-878b-38fbba79896d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""MoveBall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""734d2df7-b4cd-4d0d-95dc-f1d46015ce56"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""MoveBall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""edcaf858-ff2b-4b3c-8e6b-9d22d8b0f318"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""MoveBall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2326677d-63d7-4384-9880-d814b9323bc7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""MoveBall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d0deda1-06b7-45dc-b6cb-83a01cf3071f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KBM"",
            ""bindingGroup"": ""KBM"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Ball
        m_Ball = asset.FindActionMap("Ball", throwIfNotFound: true);
        m_Ball_MoveBall = m_Ball.FindAction("MoveBall", throwIfNotFound: true);
        m_Ball_MoveCamera = m_Ball.FindAction("MoveCamera", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ball
    private readonly InputActionMap m_Ball;
    private List<IBallActions> m_BallActionsCallbackInterfaces = new List<IBallActions>();
    private readonly InputAction m_Ball_MoveBall;
    private readonly InputAction m_Ball_MoveCamera;
    public struct BallActions
    {
        private @KatamariInput m_Wrapper;
        public BallActions(@KatamariInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveBall => m_Wrapper.m_Ball_MoveBall;
        public InputAction @MoveCamera => m_Wrapper.m_Ball_MoveCamera;
        public InputActionMap Get() { return m_Wrapper.m_Ball; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BallActions set) { return set.Get(); }
        public void AddCallbacks(IBallActions instance)
        {
            if (instance == null || m_Wrapper.m_BallActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BallActionsCallbackInterfaces.Add(instance);
            @MoveBall.started += instance.OnMoveBall;
            @MoveBall.performed += instance.OnMoveBall;
            @MoveBall.canceled += instance.OnMoveBall;
            @MoveCamera.started += instance.OnMoveCamera;
            @MoveCamera.performed += instance.OnMoveCamera;
            @MoveCamera.canceled += instance.OnMoveCamera;
        }

        private void UnregisterCallbacks(IBallActions instance)
        {
            @MoveBall.started -= instance.OnMoveBall;
            @MoveBall.performed -= instance.OnMoveBall;
            @MoveBall.canceled -= instance.OnMoveBall;
            @MoveCamera.started -= instance.OnMoveCamera;
            @MoveCamera.performed -= instance.OnMoveCamera;
            @MoveCamera.canceled -= instance.OnMoveCamera;
        }

        public void RemoveCallbacks(IBallActions instance)
        {
            if (m_Wrapper.m_BallActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBallActions instance)
        {
            foreach (var item in m_Wrapper.m_BallActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BallActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BallActions @Ball => new BallActions(this);
    private int m_KBMSchemeIndex = -1;
    public InputControlScheme KBMScheme
    {
        get
        {
            if (m_KBMSchemeIndex == -1) m_KBMSchemeIndex = asset.FindControlSchemeIndex("KBM");
            return asset.controlSchemes[m_KBMSchemeIndex];
        }
    }
    public interface IBallActions
    {
        void OnMoveBall(InputAction.CallbackContext context);
        void OnMoveCamera(InputAction.CallbackContext context);
    }
}
